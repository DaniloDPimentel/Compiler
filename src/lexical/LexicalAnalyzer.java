/* The following code was generated by JFlex 1.6.1 */

package lexical;
import java_cup.*;
import java_cup.runtime.*;
import sintatico.Parser;
import sintatico.sym;
import util.JavaSymbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/danilo.duarte/Documents/UFCG/Compiler 2017/language.flex</tt>
 */
public class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\52\1\25\1\30\1\104\1\51\1\27\16\52\4\0\1\25\1\40"+
    "\1\33\1\0\1\4\1\41\1\42\1\21\1\47\1\50\1\34\1\35"+
    "\1\101\1\10\1\31\1\54\1\1\1\32\2\32\4\3\1\2\1\2"+
    "\1\46\1\100\1\102\1\43\1\103\1\44\1\0\3\5\1\5\1\7"+
    "\1\13\5\4\1\15\3\4\1\11\4\4\1\17\2\4\1\6\2\4"+
    "\1\36\1\20\1\37\1\45\1\4\1\0\1\55\1\23\1\61\1\70"+
    "\1\63\1\12\1\73\1\66\1\67\1\4\1\64\1\14\1\71\1\22"+
    "\1\62\1\72\1\4\1\60\1\56\1\57\1\16\1\26\1\74\1\24"+
    "\1\65\1\75\1\76\1\53\1\77\1\0\6\52\1\105\32\52\2\0"+
    "\1\4\1\4\2\4\4\0\1\4\2\0\1\52\2\0\1\0\4\0"+
    "\1\4\4\0\1\4\5\0\2\4\1\4\24\4\1\0\37\4\1\0"+
    "\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\21\0"+
    "\160\52\5\4\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4"+
    "\1\0\1\4\1\0\24\4\1\0\123\4\1\0\213\4\1\0\5\52"+
    "\2\0\236\4\11\0\46\4\2\0\1\4\7\0\47\4\7\0\1\4"+
    "\1\0\55\52\1\0\1\52\1\0\2\52\1\0\2\52\1\0\1\52"+
    "\10\0\33\4\5\0\3\4\15\0\5\52\6\0\1\4\4\0\13\52"+
    "\5\0\53\4\37\52\4\0\2\4\1\52\143\4\1\0\1\4\10\52"+
    "\1\0\6\52\2\4\2\52\1\0\4\52\2\4\12\52\3\4\2\0"+
    "\1\4\17\0\1\52\1\4\1\52\36\4\33\52\2\0\131\4\13\52"+
    "\1\4\16\0\12\52\41\4\11\52\2\4\4\0\1\4\5\0\26\4"+
    "\4\52\1\4\11\52\1\4\3\52\1\4\5\52\22\0\31\4\3\52"+
    "\104\0\1\4\1\0\13\4\67\0\33\52\1\0\4\52\66\4\3\52"+
    "\1\4\22\52\1\4\7\52\12\4\2\52\2\0\12\52\1\0\7\4"+
    "\1\0\7\4\1\0\3\52\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\52\1\4\7\52"+
    "\2\0\2\52\2\0\3\52\1\4\10\0\1\52\4\0\2\4\1\0"+
    "\3\4\2\52\2\0\12\52\4\4\7\0\1\4\5\0\3\52\1\0"+
    "\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\2\0\1\52\1\0\5\52\4\0\2\52\2\0"+
    "\3\52\3\0\1\52\7\0\4\4\1\0\1\4\7\0\14\52\3\4"+
    "\1\52\13\0\3\52\1\0\11\4\1\0\3\4\1\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\52\1\4\10\52\1\0"+
    "\3\52\1\0\3\52\2\0\1\4\17\0\2\4\2\52\2\0\12\52"+
    "\1\0\1\4\17\0\3\52\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\52\1\4\7\52"+
    "\2\0\2\52\2\0\3\52\10\0\2\52\4\0\2\4\1\0\3\4"+
    "\2\52\2\0\12\52\1\0\1\4\20\0\1\52\1\4\1\0\6\4"+
    "\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4"+
    "\3\0\2\4\3\0\3\4\3\0\14\4\4\0\5\52\3\0\3\52"+
    "\1\0\4\52\2\0\1\4\6\0\1\52\16\0\12\52\11\0\1\4"+
    "\7\0\3\52\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4"+
    "\1\0\5\4\3\0\1\4\7\52\1\0\3\52\1\0\4\52\7\0"+
    "\2\52\1\0\2\4\6\0\2\4\2\52\2\0\12\52\22\0\2\52"+
    "\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4"+
    "\2\0\1\52\1\4\7\52\1\0\3\52\1\0\4\52\7\0\2\52"+
    "\7\0\1\4\1\0\2\4\2\52\2\0\12\52\1\0\2\4\17\0"+
    "\2\52\1\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4\7\52"+
    "\1\0\3\52\1\0\4\52\1\4\10\0\1\52\10\0\2\4\2\52"+
    "\2\0\12\52\12\0\6\4\2\0\2\52\1\0\22\4\3\0\30\4"+
    "\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\52\4\0\6\52"+
    "\1\0\1\52\1\0\10\52\22\0\2\52\15\0\60\4\1\52\2\4"+
    "\7\52\4\0\10\4\10\52\1\0\12\52\47\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4"+
    "\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4"+
    "\1\52\2\4\6\52\1\0\2\52\1\4\2\0\5\4\1\0\1\4"+
    "\1\0\6\52\2\0\12\52\2\0\4\4\40\0\1\4\27\0\2\52"+
    "\6\0\12\52\13\0\1\52\1\0\1\52\1\0\1\52\4\0\2\52"+
    "\10\4\1\0\44\4\4\0\24\52\1\0\2\52\5\4\13\52\1\0"+
    "\44\52\11\0\1\52\71\0\53\4\24\52\1\4\12\52\6\0\6\4"+
    "\4\52\4\4\3\52\1\4\3\52\2\4\7\52\3\4\4\52\15\4"+
    "\14\52\1\4\17\52\2\0\46\4\1\0\1\4\5\0\1\4\2\0"+
    "\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0"+
    "\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0"+
    "\4\4\2\0\103\4\2\0\3\52\40\0\20\4\20\0\125\4\14\0"+
    "\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\3\0\3\4\17\0"+
    "\15\4\1\0\4\4\3\52\13\0\22\4\3\52\13\0\22\4\2\52"+
    "\14\0\15\4\1\0\3\4\1\0\2\52\14\0\64\4\40\52\3\0"+
    "\1\4\3\0\2\4\1\52\2\0\12\52\41\0\3\52\2\0\12\52"+
    "\6\0\130\4\10\0\51\4\1\52\1\4\5\0\106\4\12\0\35\4"+
    "\3\0\14\52\4\0\14\52\12\0\12\52\36\4\2\0\5\4\13\0"+
    "\54\4\4\0\21\52\7\4\2\52\6\0\12\52\46\0\27\4\5\52"+
    "\4\0\65\4\12\52\1\0\35\52\2\0\13\52\6\0\12\52\15\0"+
    "\1\4\130\0\5\52\57\4\21\52\7\4\4\0\12\52\21\0\11\52"+
    "\14\0\3\52\36\4\15\52\2\4\12\52\54\4\16\52\14\0\44\4"+
    "\24\52\10\0\12\52\3\0\3\4\12\52\44\4\122\0\3\52\1\0"+
    "\25\52\4\4\1\52\4\4\3\52\2\4\11\0\300\4\47\52\25\0"+
    "\4\52\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4"+
    "\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4"+
    "\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4\16\0\5\52"+
    "\30\0\1\104\1\104\5\52\20\0\2\4\23\0\1\4\13\0\5\52"+
    "\5\0\6\52\1\0\1\4\15\0\1\4\20\0\15\4\3\0\33\4"+
    "\25\0\15\52\4\0\1\52\3\0\14\52\21\0\1\4\4\0\1\4"+
    "\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4"+
    "\4\0\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4"+
    "\6\0\4\4\3\52\2\4\14\0\46\4\1\0\1\4\5\0\1\4"+
    "\2\0\70\4\7\0\1\4\17\0\1\52\27\4\11\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\40\52\57\0\1\4\u01d5\0\3\4\31\0"+
    "\11\4\6\52\1\0\5\4\2\0\5\4\4\0\126\4\2\0\2\52"+
    "\2\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4\3\0\136\4"+
    "\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4\63\0\u048d\4"+
    "\103\0\56\4\2\0\u010d\4\3\0\20\4\12\52\2\4\24\0\57\4"+
    "\1\52\4\0\12\52\1\0\31\4\7\0\1\52\120\4\2\52\45\0"+
    "\11\4\2\0\147\4\2\0\4\4\1\0\4\4\14\0\13\4\115\0"+
    "\12\4\1\52\3\4\1\52\4\4\1\52\27\4\5\52\20\0\1\4"+
    "\7\0\64\4\14\0\2\52\62\4\21\52\13\0\12\52\6\0\22\52"+
    "\6\4\3\0\1\4\4\0\12\52\34\4\10\52\2\0\27\4\15\52"+
    "\14\0\35\4\3\0\4\52\57\4\16\52\16\0\1\4\12\52\46\0"+
    "\51\4\16\52\11\0\3\4\1\52\10\4\2\52\2\0\12\52\6\0"+
    "\27\4\3\0\1\4\1\52\4\0\60\4\1\52\1\4\3\52\2\4"+
    "\2\52\5\4\2\52\1\4\1\52\1\4\30\0\3\4\2\0\13\4"+
    "\5\52\2\0\3\4\2\52\12\0\6\4\2\0\6\4\2\0\6\4"+
    "\11\0\7\4\1\0\7\4\221\0\43\4\10\52\1\0\2\52\2\0"+
    "\12\52\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0"+
    "\152\4\46\0\7\4\14\0\5\4\5\0\1\4\1\52\12\4\1\0"+
    "\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0"+
    "\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0"+
    "\20\52\20\0\7\52\14\0\2\4\30\0\3\4\31\0\1\4\6\0"+
    "\5\4\1\0\207\4\2\0\1\52\4\0\1\4\13\0\12\52\7\0"+
    "\32\4\4\0\1\4\1\0\32\4\13\0\131\4\3\0\6\4\2\0"+
    "\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0"+
    "\3\52\4\0\14\4\1\0\32\4\1\0\23\4\1\0\2\4\1\0"+
    "\17\4\2\0\16\4\42\0\173\4\105\0\65\4\210\0\1\52\202\0"+
    "\35\4\3\0\61\4\57\0\37\4\21\0\33\4\65\0\36\4\2\0"+
    "\44\4\4\0\10\4\1\0\5\4\52\0\236\4\2\0\12\52\u0356\0"+
    "\6\4\2\0\1\4\1\0\54\4\1\0\2\4\3\0\1\4\2\0"+
    "\27\4\252\0\26\4\12\0\32\4\106\0\70\4\6\0\2\4\100\0"+
    "\1\4\3\52\1\0\2\52\5\0\4\52\4\4\1\0\3\4\1\0"+
    "\33\4\4\0\3\52\4\0\1\52\40\0\35\4\203\0\66\4\12\0"+
    "\26\4\12\0\23\4\215\0\111\4\u03b7\0\3\52\65\4\17\52\37\0"+
    "\12\52\20\0\3\52\55\4\13\52\2\0\1\52\22\0\31\4\7\0"+
    "\12\52\6\0\3\52\44\4\16\52\1\0\12\52\100\0\3\52\60\4"+
    "\16\52\4\4\13\0\12\52\u04a6\0\53\4\15\52\10\0\12\52\u0936\0"+
    "\u036f\4\221\0\143\4\u0b9d\0\u042f\4\u33d1\0\u0239\4\u04c7\0\105\4\13\0"+
    "\1\4\56\52\20\0\4\52\15\4\u4060\0\2\4\u2163\0\5\52\3\0"+
    "\26\52\2\0\7\52\36\0\4\52\224\0\3\52\u01bb\0\125\4\1\0"+
    "\107\4\1\0\2\4\2\0\1\4\2\0\2\4\2\0\4\4\1\0"+
    "\14\4\1\0\1\4\1\0\7\4\1\0\101\4\1\0\4\4\2\0"+
    "\10\4\1\0\7\4\1\0\34\4\1\0\4\4\1\0\5\4\1\0"+
    "\1\4\3\0\7\4\1\0\u0154\4\2\0\31\4\1\0\31\4\1\0"+
    "\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4\1\0"+
    "\31\4\1\0\37\4\1\0\31\4\1\0\10\4\2\0\62\52\u1600\0"+
    "\4\4\1\0\33\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0"+
    "\12\4\1\0\4\4\1\0\1\4\1\0\1\4\6\0\1\4\4\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\3\4\1\0\2\4\1\0"+
    "\1\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\1\0\1\4\2\0\4\4\1\0\7\4\1\0"+
    "\4\4\1\0\4\4\1\0\1\4\1\0\12\4\1\0\21\4\5\0"+
    "\3\4\1\0\5\4\1\0\21\4\u1144\0\ua6d7\4\51\0\u1035\4\13\0"+
    "\336\4\u3fe2\0\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\52\36\0\140\52\200\0\360\52\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\3\2\1\4\2\2\2\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\12\2\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\2\36\1\37\2\0\2\40\1\1\3\0"+
    "\1\1\1\41\1\0\1\42\1\0\1\43\5\2\3\0"+
    "\5\2\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\2\0\1\56\17\2\1\57\2\2"+
    "\1\60\5\2\1\61\1\62\1\63\1\64\1\65\2\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\12\65\1\1\1\0\1\41\1\0\1\41\2\2"+
    "\1\100\2\2\1\1\1\0\1\2\1\101\3\2\1\102"+
    "\1\0\10\2\1\103\13\2\1\104\10\2\1\105\1\106"+
    "\1\66\1\0\1\107\1\0\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\0\3\2\1\120\3\2"+
    "\1\121\1\0\6\2\1\122\3\2\1\123\2\2\1\124"+
    "\2\2\1\125\1\126\14\2\1\127\1\130\1\131\1\2"+
    "\1\132\1\2\1\133\1\2\1\134\2\2\1\135\2\2"+
    "\1\136\2\2\1\137\1\140\14\2\1\141\1\2\1\142"+
    "\2\2\1\143\1\2\1\144\2\2\1\145\5\2\1\146"+
    "\1\147\1\2\1\150\3\2\1\151\1\152\5\2\1\153"+
    "\3\2\1\154\1\155\1\2\1\156\1\157\3\2\1\160"+
    "\5\2\1\161\2\2\1\162\1\2\1\163\1\2\1\164"+
    "\1\165\1\166\1\2\1\167";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u038e\0\u0460\0\u04a6\0\u038e\0\u038e\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u038e\0\u0604\0\u038e\0\u038e\0\u038e\0\u064a\0\u0690"+
    "\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0"+
    "\0\u0906\0\u094c\0\u038e\0\u038e\0\u038e\0\u038e\0\u0992\0\u09d8"+
    "\0\u0a1e\0\u0a64\0\u0aaa\0\u038e\0\u038e\0\u0af0\0\u0b36\0\u0b7c"+
    "\0\u038e\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66"+
    "\0\u038e\0\u041a\0\u038e\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u02bc\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae"+
    "\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e"+
    "\0\u038e\0\u038e\0\u10f4\0\u113a\0\u038e\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u015e\0\u159a\0\u15e0\0\u1626"+
    "\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u038e\0\u038e\0\u038e"+
    "\0\u17ca\0\u038e\0\u1810\0\u1856\0\u038e\0\u038e\0\u038e\0\u038e"+
    "\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58"+
    "\0\u1b9e\0\u1be4\0\u1c2a\0\u038e\0\u1c70\0\u1cb6\0\u015e\0\u1cfc"+
    "\0\u1d42\0\u038e\0\u1d88\0\u1dce\0\u015e\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u038e\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u015e\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274"+
    "\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4"+
    "\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u038e"+
    "\0\u038e\0\u038e\0\u18e2\0\u038e\0\u26d4\0\u038e\0\u038e\0\u038e"+
    "\0\u038e\0\u038e\0\u038e\0\u038e\0\u038e\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u015e\0\u2832\0\u2878\0\u28be\0\u015e\0\u2904\0\u294a"+
    "\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u015e\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u015e\0\u2bc0\0\u2c06\0\u015e\0\u2c4c\0\u2c92\0\u015e"+
    "\0\u015e\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c"+
    "\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u015e\0\u015e\0\u3020"+
    "\0\u3066\0\u015e\0\u30ac\0\u038e\0\u30f2\0\u015e\0\u3138\0\u317e"+
    "\0\u015e\0\u31c4\0\u320a\0\u015e\0\u3250\0\u3296\0\u015e\0\u015e"+
    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u015e\0\u3624\0\u015e\0\u366a"+
    "\0\u36b0\0\u015e\0\u36f6\0\u015e\0\u373c\0\u3782\0\u015e\0\u37c8"+
    "\0\u380e\0\u3854\0\u389a\0\u38e0\0\u015e\0\u015e\0\u3926\0\u015e"+
    "\0\u396c\0\u39b2\0\u39f8\0\u015e\0\u015e\0\u3a3e\0\u3a84\0\u3aca"+
    "\0\u3b10\0\u3b56\0\u015e\0\u3b9c\0\u3be2\0\u3c28\0\u015e\0\u015e"+
    "\0\u3c6e\0\u015e\0\u015e\0\u3cb4\0\u3cfa\0\u3d40\0\u015e\0\u3d86"+
    "\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u015e\0\u3ee4\0\u3f2a\0\u015e"+
    "\0\u3f70\0\u015e\0\u3fb6\0\u015e\0\u015e\0\u015e\0\u3ffc\0\u015e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\4\6\1\7\1\6\1\10\1\6"+
    "\1\11\3\12\1\0\1\13\1\14\1\15\1\6\1\16"+
    "\1\6\1\17\1\16\1\20\1\5\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\16\1\0\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\6\1\46\3\6\1\47"+
    "\1\50\1\6\1\51\1\6\1\52\1\6\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\2\0\20\61\1\62\6\61"+
    "\1\63\1\64\2\61\1\65\52\61\20\66\1\67\1\0"+
    "\5\66\1\70\1\71\55\66\1\0\1\72\1\73\1\72"+
    "\2\0\1\74\1\75\4\0\4\76\4\0\1\74\4\0"+
    "\1\77\1\72\30\0\1\75\23\0\3\5\3\0\1\75"+
    "\4\0\4\76\11\0\1\77\1\5\30\0\1\75\23\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\21\6\7\0\1\6\1\0"+
    "\1\100\2\5\4\0\1\101\20\0\1\102\1\5\10\0"+
    "\1\103\43\0\7\6\1\0\3\6\1\104\3\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\1\105\4\6\1\106\4\6\1\107\6\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\5\6\1\110\13\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\1\0\1\111"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\7\0\1\6\20\112\1\113\1\0\6\112\1\0"+
    "\55\112\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\1\114\5\6"+
    "\1\115\12\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\3\6\1\116\1\6\1\117\2\6\1\120\10\6"+
    "\7\0\1\6\136\0\1\16\56\0\3\77\26\0\1\77"+
    "\116\0\1\121\77\0\1\122\5\0\1\123\105\0\1\124"+
    "\105\0\1\125\104\0\1\126\1\127\105\0\1\130\105\0"+
    "\1\131\105\0\1\132\7\0\1\133\66\0\1\134\6\0"+
    "\1\135\43\0\7\6\1\0\7\6\2\0\1\6\1\136"+
    "\1\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\7\0\1\6\1\0\7\6\1\0\5\6\1\137"+
    "\1\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\2\6\1\140\5\6\1\141\1\142\5\6"+
    "\1\143\1\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\3\6\1\144\5\6\1\145\7\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\6\6\1\146\12\6"+
    "\7\0\1\6\1\0\7\6\1\0\3\6\1\147\3\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\150\4\6\1\151\3\6\1\152\7\6\7\0"+
    "\1\6\1\0\7\6\1\0\3\6\1\153\3\6\2\0"+
    "\2\6\1\154\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\21\6\7\0\1\6\1\0\7\6\1\0\1\6"+
    "\1\155\5\6\2\0\1\156\2\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\14\6\1\157\4\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\5\6\1\160"+
    "\1\161\12\6\7\0\1\6\1\0\7\6\1\0\5\6"+
    "\1\162\1\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\1\163\2\6\1\164\15\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\11\6\1\165"+
    "\7\6\7\0\1\6\43\0\1\166\36\0\1\167\46\0"+
    "\1\170\37\0\1\171\2\0\20\61\1\0\6\61\2\0"+
    "\2\61\1\0\52\61\1\172\1\173\1\172\1\174\6\172"+
    "\1\175\5\172\1\176\1\177\1\200\1\201\3\172\2\0"+
    "\1\172\1\173\1\202\15\172\1\0\5\172\1\203\1\204"+
    "\23\172\32\0\1\64\76\0\1\205\64\0\1\172\1\206"+
    "\1\172\1\207\6\172\1\210\5\172\1\211\1\212\1\213"+
    "\1\214\3\172\2\0\1\172\1\206\1\215\15\172\1\0"+
    "\5\172\1\216\1\217\23\172\32\0\1\71\56\0\1\72"+
    "\1\73\1\72\3\0\1\75\4\0\4\76\11\0\1\77"+
    "\1\72\30\0\1\75\23\0\3\73\3\0\1\75\21\0"+
    "\1\77\1\73\30\0\1\75\23\0\3\220\1\0\1\220"+
    "\1\0\1\220\2\0\2\220\7\0\1\220\5\0\1\221"+
    "\1\220\22\0\1\220\3\0\1\220\1\0\1\220\4\0"+
    "\1\220\16\0\3\222\4\0\1\223\21\0\1\222\2\0"+
    "\1\223\64\0\4\76\67\0\3\77\3\0\1\75\2\0"+
    "\4\224\14\0\1\77\30\0\1\75\23\0\3\73\2\0"+
    "\1\74\1\75\14\0\1\74\4\0\1\77\1\73\30\0"+
    "\1\75\23\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\5\6\1\225"+
    "\13\6\7\0\1\6\1\0\7\6\1\0\3\6\1\226"+
    "\3\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\21\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\3\6\1\227\15\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\1\230\2\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\1\231\2\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\21\6\7\0"+
    "\1\6\20\112\1\113\1\232\6\112\1\0\55\112\1\0"+
    "\1\112\1\0\1\112\6\0\1\112\5\0\4\112\1\233"+
    "\1\0\1\112\3\0\2\112\10\0\1\112\10\0\1\112"+
    "\1\0\2\112\26\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\2\6"+
    "\1\234\16\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\17\6\1\235\1\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\6\6\1\236\12\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\5\6\1\237\13\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\2\6"+
    "\1\240\16\6\7\0\1\6\43\0\1\241\76\0\1\242"+
    "\52\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\1\6\1\243\17\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\15\6"+
    "\1\244\3\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\245\20\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\1\246\2\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\5\6\1\247\13\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\12\6\1\250\6\6"+
    "\7\0\1\6\1\0\7\6\1\0\5\6\1\251\1\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\252\7\6\1\253\10\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\3\6\1\254\6\6\1\255"+
    "\6\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\2\6\1\256\16\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\257\20\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\1\6\1\260\1\261\16\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\1\262\2\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\1\263"+
    "\20\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\1\6\1\264\17\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\2\6\1\265\16\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\1\6\1\266\1\267\16\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\15\6"+
    "\1\270\3\6\7\0\1\6\1\0\7\6\1\0\5\6"+
    "\1\271\1\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\7\0\1\6\1\0\7\6"+
    "\1\0\1\6\1\272\5\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\1\6\1\273\1\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\4\6"+
    "\1\274\14\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\5\6\1\275\4\6\1\276\6\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\12\6\1\277\6\6"+
    "\7\0\1\6\43\0\1\300\37\0\1\301\3\0\1\174"+
    "\1\0\1\174\26\0\1\174\54\0\1\302\1\0\1\302"+
    "\26\0\1\302\54\0\1\303\1\0\1\303\15\0\1\304"+
    "\10\0\1\303\54\0\1\305\1\0\1\305\15\0\1\304"+
    "\10\0\1\305\74\0\1\306\105\0\1\307\105\0\1\310"+
    "\105\0\1\311\105\0\1\312\105\0\1\313\105\0\1\314"+
    "\105\0\1\315\65\0\3\220\1\0\1\220\1\0\1\220"+
    "\1\0\1\75\2\220\4\76\3\0\1\220\5\0\1\316"+
    "\1\220\22\0\1\220\3\0\1\220\1\0\1\220\4\0"+
    "\1\220\1\0\1\75\14\0\3\316\1\0\1\316\1\0"+
    "\1\316\2\0\2\316\7\0\1\316\6\0\1\316\22\0"+
    "\1\316\3\0\1\316\1\0\1\316\4\0\1\316\16\0"+
    "\3\222\6\0\4\224\14\0\1\222\54\0\3\222\26\0"+
    "\1\222\54\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\1\317\20\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\1\6"+
    "\1\320\17\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\321\20\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\16\6\1\322\2\6\7\0\1\6\1\0"+
    "\3\112\1\0\1\112\1\0\1\112\2\0\2\112\7\0"+
    "\1\112\6\0\1\112\22\0\1\112\3\0\1\112\1\0"+
    "\1\112\4\0\1\112\16\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\12\6\1\323\6\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\324\20\6\7\0\1\6\1\0\7\6"+
    "\1\0\3\6\1\325\3\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\6\6\1\326\12\6"+
    "\7\0\1\6\34\242\1\327\51\242\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\2\6\1\330\16\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\6\6\1\331\12\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\2\6\1\332"+
    "\16\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\4\6\1\333\14\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\3\6\1\334\15\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\2\6\1\335\16\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\6\6\1\336"+
    "\12\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\1\337\2\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\21\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\5\6\1\340\1\341\12\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\1\6\1\342\17\6\7\0"+
    "\1\6\1\0\7\6\1\0\5\6\1\343\1\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\1\6\1\344\17\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\6\6\1\345\12\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\4\6\1\346\14\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\2\6\1\347"+
    "\16\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\3\6\1\350\15\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\6\6\1\351\12\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\6\6\1\352\12\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\2\6\1\353"+
    "\16\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\6\6\1\354\12\6\7\0\1\6\1\0\7\6\1\0"+
    "\3\6\1\355\3\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\5\6\1\356\13\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\1\6\1\357"+
    "\1\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\1\360\20\6\7\0\1\6\1\0\7\6\1\0\3\6"+
    "\1\361\3\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\7\6\1\362\11\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\2\6\1\363\16\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\364\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\7\0\1\6\1\0\7\6\1\0\3\6\1\365\3\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\21\6\7\0\1\6\21\0\1\304\65\0\3\316"+
    "\1\0\1\316\1\0\1\316\1\0\1\75\2\316\7\0"+
    "\1\316\6\0\1\316\22\0\1\316\3\0\1\316\1\0"+
    "\1\316\4\0\1\316\1\0\1\75\14\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\2\6\1\366\16\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\6\6\1\367\12\6\7\0"+
    "\1\6\1\0\7\6\1\0\3\6\1\370\3\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\371\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\7\6\1\372\11\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\6\6\1\373\12\6\7\0\1\6\34\242"+
    "\1\327\17\242\1\374\31\242\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\3\6\1\375\15\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\3\6\1\376\15\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\12\6\1\377\6\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\11\6"+
    "\1\u0100\7\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\2\6\1\u0101\16\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\4\6\1\u0102\14\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\1\6\1\u0103\17\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\17\6"+
    "\1\u0104\1\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\1\u0105\20\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\3\6\1\u0106\15\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\1\6\1\u0107\17\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\11\6\1\u0108"+
    "\7\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\12\6\1\u0109\6\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\1\u010a\2\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\1\u010b\20\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\3\6\1\u010c\15\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\6\6\1\u010d"+
    "\12\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\3\6\1\u010e\15\6\7\0\1\6\1\0\7\6\1\0"+
    "\3\6\1\u010f\3\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\21\6\7\0\1\6\1\0"+
    "\7\6\1\0\5\6\1\u0110\1\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\21\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\12\6\1\u0111"+
    "\6\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\1\u0112\20\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\6\6\1\u0113\12\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\1\u0114\20\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\6\6\1\u0115\12\6\7\0"+
    "\1\6\1\0\7\6\1\0\3\6\1\u0116\3\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\6\6\1\u0117\12\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\u0118\20\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\1\u0119\20\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\4\6\1\u011a\14\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\3\6\1\u011b"+
    "\15\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\11\6\1\u011c\7\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\12\6\1\u011d\6\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\13\6\1\u011e\5\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\1\u011f\2\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\21\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\1\u0120"+
    "\2\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\13\6\1\u0121\5\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\1\u0122\2\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\21\6\7\0\1\6\1\0\7\6"+
    "\1\0\1\6\1\u0123\5\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\14\6\1\u0124\4\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\2\6"+
    "\1\u0125\16\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\6\6\1\u0126\12\6\7\0\1\6\1\0\7\6"+
    "\1\0\3\6\1\u0127\3\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\4\6\1\u0128\14\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\16\6"+
    "\1\u0129\2\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\4\6\1\u012a\14\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\2\6\1\u012b\16\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\10\6\1\u012c\10\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\1\u012d"+
    "\2\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\21\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\4\6\1\u012e\14\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\5\6\1\u012f\13\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\6\6\1\u0130\12\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\1\6\1\u0131"+
    "\17\6\7\0\1\6\1\0\7\6\1\0\5\6\1\u0132"+
    "\1\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\21\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\6\1\u0133\17\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\4\6\1\u0134\14\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\1\u0135\20\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\6\6"+
    "\1\u0136\12\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\2\6\1\u0137\16\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\6\6\1\u0138\12\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\2\6\1\u0139\16\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\6\6"+
    "\1\u013a\12\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\2\6\1\u013b\16\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\1\u013c\2\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\21\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\1\u013d\2\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\1\u013e\20\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\6\6\1\u013f"+
    "\12\6\7\0\1\6\1\0\7\6\1\0\7\6\2\0"+
    "\3\6\1\0\1\6\3\0\1\6\17\0\1\6\2\0"+
    "\6\6\1\u0140\12\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\4\6\1\u0141\14\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\1\u0142\2\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\6\6\1\u0143\12\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\12\6"+
    "\1\u0144\6\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\2\6\1\u0145\16\6\7\0\1\6\1\0\7\6"+
    "\1\0\1\6\1\u0146\5\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\21\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\5\6\1\u0147\13\6"+
    "\7\0\1\6\1\0\7\6\1\0\7\6\2\0\3\6"+
    "\1\0\1\6\3\0\1\6\17\0\1\6\2\0\6\6"+
    "\1\u0148\12\6\7\0\1\6\1\0\7\6\1\0\7\6"+
    "\2\0\3\6\1\0\1\6\3\0\1\6\17\0\1\6"+
    "\2\0\2\6\1\u0149\16\6\7\0\1\6\1\0\7\6"+
    "\1\0\7\6\2\0\3\6\1\0\1\6\3\0\1\6"+
    "\17\0\1\6\2\0\13\6\1\u014a\5\6\7\0\1\6"+
    "\1\0\7\6\1\0\7\6\2\0\3\6\1\0\1\6"+
    "\3\0\1\6\17\0\1\6\2\0\20\6\1\u014b\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\6\6\1\u014c"+
    "\12\6\7\0\1\6\1\0\7\6\1\0\1\6\1\u014d"+
    "\5\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\21\6\7\0\1\6\1\0\7\6\1\0"+
    "\7\6\2\0\3\6\1\0\1\6\3\0\1\6\17\0"+
    "\1\6\2\0\1\6\1\u014e\17\6\7\0\1\6\1\0"+
    "\7\6\1\0\7\6\2\0\3\6\1\0\1\6\3\0"+
    "\1\6\17\0\1\6\2\0\6\6\1\u014f\12\6\7\0"+
    "\1\6\1\0\7\6\1\0\7\6\2\0\3\6\1\0"+
    "\1\6\3\0\1\6\17\0\1\6\2\0\13\6\1\u0150"+
    "\5\6\7\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\12\1\1\11\2\1\1\11\2\1\2\11\4\1"+
    "\1\11\1\1\3\11\14\1\4\11\3\1\1\0\1\1"+
    "\2\11\2\0\1\1\1\11\1\1\3\0\2\1\1\0"+
    "\1\11\1\0\1\11\5\1\3\0\5\1\12\11\2\0"+
    "\1\11\30\1\3\11\1\1\1\11\2\1\11\11\13\1"+
    "\1\0\1\1\1\0\1\11\5\1\1\11\1\0\5\1"+
    "\1\11\1\0\35\1\3\11\1\0\1\11\1\0\10\11"+
    "\1\0\10\1\1\0\44\1\1\11\124\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
	return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
	return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  private long parseLong(int start, int end, int radix) {
	long result = 0;
	long digit;

	for (int i = start; i < end; i++) {
	  digit  = Character.digit(yycharat(i),radix);
	  result*= radix;
	  result+= digit;
	}

	return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2906) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.INTEGER_LITERAL , new String(yytext()));
            }
          case 120: break;
          case 2: 
            { return symbol(sym.IDENTIFIER,yytext());
            }
          case 121: break;
          case 3: 
            { return symbol(sym.MINUS);
            }
          case 122: break;
          case 4: 
            { yybegin(CHARLITERAL);
            }
          case 123: break;
          case 5: 
            { /* just ignore it*/
            }
          case 124: break;
          case 6: 
            { return symbol(sym.DOT);
            }
          case 125: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 126: break;
          case 8: 
            { return symbol(sym.MULT);
            }
          case 127: break;
          case 9: 
            { return symbol(sym.PLUS);
            }
          case 128: break;
          case 10: 
            { return symbol(sym.LBRACK);
            }
          case 129: break;
          case 11: 
            { return symbol(sym.RBRACK);
            }
          case 130: break;
          case 12: 
            { return symbol(sym.NOT);
            }
          case 131: break;
          case 13: 
            { return symbol(sym.MOD);
            }
          case 132: break;
          case 14: 
            { return symbol(sym.AMPERSAND);
            }
          case 133: break;
          case 15: 
            { return symbol(sym.EQ);
            }
          case 134: break;
          case 16: 
            { return symbol(sym.QUESTION);
            }
          case 135: break;
          case 17: 
            { return symbol(sym.XOR);
            }
          case 136: break;
          case 18: 
            { return symbol(sym.COLON);
            }
          case 137: break;
          case 19: 
            { return symbol(sym.LPAREN);
            }
          case 138: break;
          case 20: 
            { return symbol(sym.RPAREN);
            }
          case 139: break;
          case 21: 
            { return symbol(sym.OR);
            }
          case 140: break;
          case 22: 
            { return symbol(sym.DIV);
            }
          case 141: break;
          case 23: 
            { return symbol(sym.LBRACE);
            }
          case 142: break;
          case 24: 
            { return symbol(sym.RBRACE);
            }
          case 143: break;
          case 25: 
            { return symbol(sym.SEMICOLON);
            }
          case 144: break;
          case 26: 
            { return symbol(sym.COMMA);
            }
          case 145: break;
          case 27: 
            { return symbol(sym.LT);
            }
          case 146: break;
          case 28: 
            { return symbol(sym.GT);
            }
          case 147: break;
          case 29: 
            { string.append( yytext() );
            }
          case 148: break;
          case 30: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 149: break;
          case 31: 
            { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
            }
          case 150: break;
          case 32: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 151: break;
          case 33: 
            { return symbol(sym.FLOAT_LITERAL , new String(yytext()));
            }
          case 152: break;
          case 34: 
            { return symbol(sym.MINUSMINUS);
            }
          case 153: break;
          case 35: 
            { return symbol(sym.MINUSEQ);
            }
          case 154: break;
          case 36: 
            { return symbol(sym.MULTEQ);
            }
          case 155: break;
          case 37: 
            { return symbol(sym.PLUSPLUS);
            }
          case 156: break;
          case 38: 
            { return symbol(sym.PLUSEQ);
            }
          case 157: break;
          case 39: 
            { return symbol(sym.NOTEQ);
            }
          case 158: break;
          case 40: 
            { return symbol(sym.MODEQ);
            }
          case 159: break;
          case 41: 
            { return symbol(sym.AMPERSANDAMPERSAND);
            }
          case 160: break;
          case 42: 
            { return symbol(sym.AMPERSANDEQ);
            }
          case 161: break;
          case 43: 
            { return symbol(sym.EQEQ);
            }
          case 162: break;
          case 44: 
            { return symbol(sym.XOREQ);
            }
          case 163: break;
          case 45: 
            { return symbol(sym.OREQ);
            }
          case 164: break;
          case 46: 
            { return symbol(sym.DIVEQ);
            }
          case 165: break;
          case 47: 
            { return symbol(sym.IF);
            }
          case 166: break;
          case 48: 
            { return symbol(sym.DO);
            }
          case 167: break;
          case 49: 
            { return symbol(sym.LTEQ);
            }
          case 168: break;
          case 50: 
            { return symbol(sym.LSHIFT);
            }
          case 169: break;
          case 51: 
            { return symbol(sym.GTEQ);
            }
          case 170: break;
          case 52: 
            { return symbol(sym.RSHIFT);
            }
          case 171: break;
          case 53: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 172: break;
          case 54: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                        string.append( val );
            }
          case 173: break;
          case 55: 
            { string.append( '\f' );
            }
          case 174: break;
          case 56: 
            { string.append( '\\' );
            }
          case 175: break;
          case 57: 
            { string.append( '\'' );
            }
          case 176: break;
          case 58: 
            { string.append( '\n' );
            }
          case 177: break;
          case 59: 
            { string.append( '\b' );
            }
          case 178: break;
          case 60: 
            { string.append( '\"' );
            }
          case 179: break;
          case 61: 
            { string.append( '\t' );
            }
          case 180: break;
          case 62: 
            { string.append( '\r' );
            }
          case 181: break;
          case 63: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character(yytext().charAt(0)));
            }
          case 182: break;
          case 64: 
            { return symbol(sym.FOR);
            }
          case 183: break;
          case 65: 
            { return symbol(sym.NEW);
            }
          case 184: break;
          case 66: 
            { return symbol(sym.OROREQ);
            }
          case 185: break;
          case 67: 
            { return symbol(sym.TRY);
            }
          case 186: break;
          case 68: 
            { return symbol(sym.INT);
            }
          case 187: break;
          case 69: 
            { return symbol(sym.RSHIFTEQ);
            }
          case 188: break;
          case 70: 
            { return symbol(sym.URSHIFT);
            }
          case 189: break;
          case 71: 
            { yybegin(YYINITIAL);
                                        int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
										return symbol(sym.CHARACTER_LITERAL, new Character((char)val));
            }
          case 190: break;
          case 72: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\f'));
            }
          case 191: break;
          case 73: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\\'));
            }
          case 192: break;
          case 74: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\''));
            }
          case 193: break;
          case 75: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\n'));
            }
          case 194: break;
          case 76: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\b'));
            }
          case 195: break;
          case 77: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\"'));
            }
          case 196: break;
          case 78: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\t'));
            }
          case 197: break;
          case 79: 
            { yybegin(YYINITIAL); return symbol(sym.CHARACTER_LITERAL, new Character('\r'));
            }
          case 198: break;
          case 80: 
            { return symbol(sym.LONG);
            }
          case 199: break;
          case 81: 
            { return symbol(sym.BYTE);
            }
          case 200: break;
          case 82: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(true));
            }
          case 201: break;
          case 83: 
            { return symbol(sym.THIS);
            }
          case 202: break;
          case 84: 
            { return symbol(sym.CASE);
            }
          case 203: break;
          case 85: 
            { return symbol(sym.CHAR);
            }
          case 204: break;
          case 86: 
            { return symbol(sym.ELSE);
            }
          case 205: break;
          case 87: 
            { return symbol(sym.FLOAT);
            }
          case 206: break;
          case 88: 
            { return symbol(sym.BOOLEAN_LITERAL, new Boolean(false));
            }
          case 207: break;
          case 89: 
            { return symbol(sym.FINAL);
            }
          case 208: break;
          case 90: 
            { return symbol(sym.BREAK);
            }
          case 209: break;
          case 91: 
            { /* just ignore it */
            }
          case 210: break;
          case 92: 
            { return symbol(sym.SUPER);
            }
          case 211: break;
          case 93: 
            { return symbol(sym.SHORT);
            }
          case 212: break;
          case 94: 
            { return symbol(sym.THROW);
            }
          case 213: break;
          case 95: 
            { return symbol(sym.CLASS);
            }
          case 214: break;
          case 96: 
            { return symbol(sym.CATCH);
            }
          case 215: break;
          case 97: 
            { return symbol(sym.WHILE);
            }
          case 216: break;
          case 98: 
            { return symbol(sym.NATIVE);
            }
          case 217: break;
          case 99: 
            { return symbol(sym.STATIC);
            }
          case 218: break;
          case 100: 
            { return symbol(sym.SWITCH);
            }
          case 219: break;
          case 101: 
            { return symbol(sym.RETURN);
            }
          case 220: break;
          case 102: 
            { return symbol(sym.IMPORT);
            }
          case 221: break;
          case 103: 
            { return symbol(sym.DOUBLE);
            }
          case 222: break;
          case 104: 
            { return symbol(sym.PUBLIC);
            }
          case 223: break;
          case 105: 
            { return symbol(sym.FINALLY);
            }
          case 224: break;
          case 106: 
            { return symbol(sym.BOOLEAN);
            }
          case 225: break;
          case 107: 
            { return symbol(sym.EXTENDS);
            }
          case 226: break;
          case 108: 
            { return symbol(sym.DEFAULT);
            }
          case 227: break;
          case 109: 
            { return symbol(sym.PACKAGE);
            }
          case 228: break;
          case 110: 
            { return symbol(sym.PRIVATE);
            }
          case 229: break;
          case 111: 
            { return symbol(sym.ABSTRACT);
            }
          case 230: break;
          case 112: 
            { return symbol(sym.CONTINUE);
            }
          case 231: break;
          case 113: 
            { return symbol(sym.TRANSIENT);
            }
          case 232: break;
          case 114: 
            { return symbol(sym.INTERFACE);
            }
          case 233: break;
          case 115: 
            { return symbol(sym.PROTECTED);
            }
          case 234: break;
          case 116: 
            { return symbol(sym.THREADSAFE);
            }
          case 235: break;
          case 117: 
            { return symbol(sym.INSTANCEOF);
            }
          case 236: break;
          case 118: 
            { return symbol(sym.IMPLEMENTS);
            }
          case 237: break;
          case 119: 
            { return symbol(sym.SYNCHRONIZED);
            }
          case 238: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexicalAnalyzer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexicalAnalyzer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexicalAnalyzer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
