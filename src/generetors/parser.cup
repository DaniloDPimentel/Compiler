package sintatico;

import java_cup.runtime.*;
import lexical.*;
import util.*;
import java.util.ArrayList;

parser code  {:
 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error ");

   if (info instanceof java_cup.runtime.Symbol)
     m.append( "("+info.toString()+")" );

   m.append(" : "+message);

   System.out.println(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
:};

terminal BOOLEAN, BYTE, SHORT, INT, LONG, CHAR, FLOAT, DOUBLE;
terminal DOT, SEMICOLON, MULT, COMMA, LBRACE, RBRACE, EQ, LPAREN, RPAREN, COLON;
terminal PACKAGE, IMPORT, PUBLIC, PROTECTED, PRIVATE, THREADSAFE, STATIC, ABSTRACT, FINAL, NATIVE, SYNCHRONIZED, TRANSIENT;
terminal CLASS, EXTENDS, IMPLEMENTS, THIS, SUPER, INTERFACE; 
terminal IF, ELSE, SWITCH, CASE, DEFAULT, DO, WHILE, FOR, BREAK, CONTINUE, RETURN, THROW, TRY, CATCH, FINALLY, NEW;
terminal PLUSPLUS, MINUSMINUS, PLUS, MINUS, NOT, DIV, MOD;
terminal LBRACK, RBRACK, LSHIFT, RSHIFT, URSHIFT, LT, GT, LTEQ, GTEQ, INSTANCEOF;
terminal EQEQ, NOTEQ, XOR, OR, OROREQ, QUESTION;
terminal MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ, RSHIFTEQ, XOREQ, OREQ, TIO;
terminal AMPERSAND, AMPERSANDEQ, AMPERSANDAMPERSAND, INTEGER_LITERAL,FLOAT_LITERAL;


terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.Character CHARACTER_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.String IDENTIFIER;
terminal NULL;

non terminal compilation_unit, import_statement_loop, import_statement_aux, modifier_aux,extends_declaration,interface_name_aux;
non terminal interface_name_loop, statement_block_aux, type_declaration, class_declaration, modifier;
non terminal package_name, class_name, interface_name;
non terminal field_declaration, field_declaration_loop;
non terminal method_declaration, constructor_declaration, variable_declaration, static_initializer;
non terminal import_statement;
non terminal type, type_specifier, interface_declaration;
non terminal statement, statement_block;
non terminal brack;
non terminal parameter, parameter_list;
non terminal variable_declarator;
non terminal variable_initializer;
non terminal if_statement,else_opcional;
non terminal expression;
non terminal do_statement, while_statement, for_statement;
non terminal try_statement;
non terminal switch_statement;
non terminal numeric_expression, testing_expression, logical_expression, string_expression;
non terminal bit_expression, casting_expression, creating_expression, literal_expression;
non terminal package_statement;
non terminal attribution;
non terminal bracks,parameter_aux,statement_block_loop,expression_aux;
non terminal identifier_aux,variable_declaration_aux,variable_initializer_aux,variable_initializer_aux_loop;
non terminal comma_opcional,expression_opcionais,arglist_opcional,arglist;
non terminal decl_for,catch_aux,finally_opcional,switch_loop,switch_aux,signal_options,signal_opt;
non terminal numeric_operators, boolean_operators,logical_operators, string_operators,bit_operators;
non terminal creating_expression_aux, creating_expression_opcional;

start with compilation_unit;													 

compilation_unit ::= package_statement import_statement type_declaration			{: System.out.println("Line 73"); :}  
;
   
package_statement ::= 
						| PACKAGE package_name SEMICOLON							{: System.out.println("Line 77"); :}
;                            
	
import_statement_loop ::=
    import_statement                                                        {:System.out.println("81");:}
    | import_statement import_statement_loop                                {:System.out.println("82");:}
;	
	
import_statement ::= IMPORT import_statement_aux SEMICOLON 						{: System.out.println("Line 86"); :}	
					;
										
import_statement_aux ::= package_name DOT MULT
						| package_name
 ;
				
type_declaration ::= class_declaration |                                                      
						interface_declaration ;
						
class_declaration ::=
    modifier_aux CLASS IDENTIFIER                                                                                                              
    extends_declaration 
	interface_name_aux                                                                      
    LBRACE field_declaration_loop RBRACE ;                                                                             

extends_declaration ::=
						| EXTENDS class_name ;
	
interface_name_aux ::=                                              
    | IMPLEMENTS interface_name_loop ;
	
interface_name_loop ::= interface_name
						| interface_name COMMA interface_name_loop;
				
class_name ::= IDENTIFIER
						| package_name DOT IDENTIFIER;
						
interface_name ::= IDENTIFIER
						| package_name DOT IDENTIFIER;

interface_declaration ::= 
						modifier_aux INTERFACE IDENTIFIER 
						extends_declaration
						LBRACE field_declaration_loop RBRACE;
						
field_declaration_loop ::= 
							| field_declaration field_declaration_loop;
	
field_declaration ::= 
					| method_declaration 
					| constructor_declaration
					| variable_declaration
					| static_initializer
					| SEMICOLON;
					
method_declaration ::= modifier_aux type:t IDENTIFIER:i LPAREN parameter_list:p RPAREN			{:System.out.println("Line 132"); SemanticUtil.getInstance().checkMethod((Type)t, i,(ArrayList<Param>) p);:}
						statement_block_aux;
					
statement_block_aux ::= statement_block 
					| SEMICOLON ;
					
type ::= type_specifier:t																		{:System.out.println("Line 138"); RESULT=t;:}
		| bracks;
		
bracks ::=  
		| brack bracks;
		
brack ::= LBRACK RBRACK;

parameter_list ::= 
					| parameter_aux:pa															{:System.out.println("Line 147"); RESULT=pa;:}
					;
				
parameter_aux ::= parameter:p																	{:System.out.println("Line 150"); RESULT = SemanticUtil.getInstance().addParamList(p);:}
					| parameter:p COMMA parameter_aux:pa										{:System.out.println("Line 151"); RESULT = SemanticUtil.getInstance().addParamList(p);:}
					;
					
parameter ::= type:t IDENTIFIER:i bracks														{:System.out.println("Line 154"); RESULT = new Variable(i, (Type)t);:}
		;

statement_block ::= LBRACE RBRACE
					| LBRACE statement_block_loop:sbl RBRACE									{:System.out.println("Line 146"); RESULT = sbl;:}
					;
					
statement_block_loop ::= statement:s															{:System.out.println("Line 161"); RESULT = s;:}
						| statement:s statement_block_loop										{:System.out.println("Line 162"); RESULT = s;:}
						;
						
statement ::= variable_declaration
				| expression SEMICOLON
				| statement_block
				| if_statement
				| do_statement
				| while_statement
				| for_statement
				| try_statement
				| switch_statement
				| SYNCHRONIZED LPAREN expression RPAREN statement
				| RETURN expression_aux:e SEMICOLON												{:System.out.println("Line 173"); if (SemanticUtil.getInstance().checkObject(e)){ ((Expression) e).setContext("return"); SemanticUtil.getInstance().checkMethodReturn((Expression)e) ;RESULT = e; } :}
				| THROW expression SEMICOLON
				| IDENTIFIER COLON statement
				| BREAK identifier_aux SEMICOLON
				| CONTINUE identifier_aux SEMICOLON
				| SEMICOLON
				;

expression_aux ::= 
				| expression:e																	{:System.out.println("Line 183"); RESULT = e;:}
				;
				
identifier_aux ::= 
				| IDENTIFIER ;
				
constructor_declaration ::= modifier_aux IDENTIFIER LPAREN parameter_list RPAREN
							statement_block ;
							
variable_declaration ::= modifier_aux type:t variable_declaration_aux:v SEMICOLON 									{:System.out.println("Line 187"); SemanticUtil.getInstance().addVariableType((Type) t);RESULT=v;:}
;

variable_declaration_aux ::= variable_declarator:v																	{:System.out.println("Line 190"); SemanticUtil.getInstance().addVariable((Variable)v); RESULT = v;:}
								| variable_declarator:v COMMA variable_declaration_aux 								{:System.out.println("Line 191"); SemanticUtil.getInstance().addVariable((Variable)v); RESULT = v;:}
								;
								
variable_declarator ::= IDENTIFIER:i bracks attribution:exp 															{:System.out.println("Line 194");
																													Variable var = new Variable((String) i, new Type("null"), (Expression) exp);
																													RESULT = var;:}		
;

attribution ::= 
				| EQ variable_initializer:exp																		{:System.out.println("Line 194"); RESULT = exp;:}
				;
				
variable_initializer ::= expression:e 																				{:System.out.println("Line 202"); RESULT = e;:}
							| LBRACE variable_initializer_aux RBRACE ;
							
variable_initializer_aux ::= 
								| variable_initializer_aux_loop comma_opcional ;
								
variable_initializer_aux_loop ::= 
									| variable_initializer
									| variable_initializer COMMA variable_initializer_aux_loop ;
								
comma_opcional ::= 
					| COMMA ;

static_initializer ::= STATIC statement_block ;

expression ::= numeric_expression:ne									{:System.out.println("Line 204"); RESULT = ne;:}
				| testing_expression:te									{:System.out.println("Line 205"); RESULT = te;:}
				| logical_expression:loe								{:System.out.println("Line 206"); RESULT = loe;:}
				| string_expression:se									{:System.out.println("Line 207"); RESULT = se;:}
				| bit_expression:be										{:System.out.println("Line 208"); RESULT = be;:}
				| casting_expression:cae								{:System.out.println("Line 209"); RESULT = cae;:}
				| creating_expression:cre								{:System.out.println("Line 210"); RESULT = cre;:}
				| literal_expression:lie								{:System.out.println("Line 211"); RESULT = lie;:}
				| NULL:nul												{:System.out.println("Line 212"); RESULT = nul;:}
				| SUPER:sp												{:System.out.println("Line 213"); RESULT = sp;:}
				| THIS:th												{:System.out.println("Line 214"); RESULT = th;:}
				| IDENTIFIER:i											{:System.out.println("Line 215"); SemanticUtil.getInstance().validateVariableName(i); RESULT=i; :}
				| LPAREN expression:e RPAREN							{:System.out.println("Line 216"); RESULT = e;:}
				| expression:e expression_opcionais:eop 				{:System.out.println("Line 217"); RESULT = e;:}
				;

expression_opcionais ::= LPAREN arglist_opcional RPAREN
						| LBRACK expression RBRACK
						| DOT expression
						| COMMA expression
						| INSTANCEOF import_statement_aux ;

arglist_opcional ::= 
						| arglist ;

if_statement ::= IF LPAREN expression RPAREN statement else_opcional ;

else_opcional ::= 
					| ELSE statement ;

do_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON ;

while_statement ::= WHILE LPAREN expression RPAREN statement ;

for_statement ::= FOR LPAREN decl_for expression_aux SEMICOLON expression_aux SEMICOLON RPAREN statement ;

decl_for ::= variable_declaration
				| expression SEMICOLON
				| SEMICOLON ;

try_statement ::= TRY statement catch_aux finally_opcional ;

catch_aux ::= 
				| CATCH LPAREN parameter RPAREN statement catch_aux ;

finally_opcional ::= 
					| FINALLY statement ;
					
switch_statement ::= SWITCH LPAREN expression:e RPAREN LBRACE switch_loop RBRACE                        {: System.out.println("Line 272"); if (SemanticUtil.getInstance().checkObject(e)){ SemanticUtil.getInstance().checkSwitchExpression((Expression)e); RESULT=e; } :}       
						;

switch_loop ::= 
				| switch_aux switch_loop ;

switch_aux ::= CASE expression:e COLON 																	{: System.out.println("Line 260"); SemanticUtil.getInstance().checkSwitchExpression((Expression)e); RESULT=e; :} 
				| DEFAULT COLON
				| statement ;

numeric_expression ::= signal_options expression
						| expression signal_opt
						| expression numeric_operators expression ;

signal_options ::= MINUS
					| PLUSPLUS
					| MINUSMINUS ;
					
signal_opt ::= PLUSPLUS
				| MINUSMINUS ;
				
numeric_operators ::= PLUS 													{:RESULT= new Node("+","primary", "PLUS");:}
						| PLUSEQ 											{:RESULT= new Node("+=","primary", "PLUSEQ");:}
						| MINUS 											{:RESULT= new Node("-","primary", "MINUS");:}
						| MINUSEQ 											{:RESULT= new Node("-=","primary", "MINUSEQ");:}
						| MULT 												{:RESULT= new Node("*","primary", "MULT");:}
						| MULTEQ 											{:RESULT= new Node("*=","primary", "MULTEQ");:}
						| DIV 												{:RESULT= new Node("/","primary", "DIV");:}
						| DIVEQ 											{:RESULT= new Node("/=","primary", "DIVEQ");:}
						| MOD 												{:RESULT= new Node("%","primary", "MOD");:}
						| MODEQ 											{:RESULT= new Node("%=","primary", "MODEQ");:}
						;

testing_expression ::= 	expression boolean_operators expression ;				

boolean_operators ::= GT 													{:RESULT = new Node(">","primary", "GT");:}
						| LT 												{:RESULT= new Node("<","primary", "LT");:}
						| GTEQ 												{:RESULT= new Node(">=","primary", "GTEQ");:}
						| LTEQ 												{:RESULT= new Node("<=","primary", "LTEQ");:}
						| EQEQ 												{:RESULT= new Node("==","primary", "EQEQ");:}
						| NOTEQ  											{:RESULT= new Node("!=","primary", "NOTEQ");:}
						;
						
logical_expression ::= NOT expression 
						| expression logical_operators expression
						| expression QUESTION expression COLON expression
						| BOOLEAN_LITERAL ;
						
logical_operators ::= AMPERSAND 											{:RESULT = new Node("&","primary", "AMPERSAND");:}
						| AMPERSANDEQ 										{:RESULT = new Node("&=","primary", "AMPERSANDEQ");:}
						| OR 												{:RESULT = new Node("|","primary", "OR");:}
						| OREQ 												{:RESULT = new Node("|=","primary", "OREQ");:}
						| XOR 												{:RESULT = new Node("^","primary", "XOR");:}
						| XOREQ 											{:RESULT = new Node("^=","primary", "XOREQ");:}
						| AMPERSANDAMPERSAND 								{:RESULT = new Node("&&","primary", "AMPERSANDAMPERSAND");:}
						| OROREQ 											{:RESULT = new Node("||=","primary", "OROREQ");:}
						| MOD 												{:RESULT = new Node("%","primary", "MOD");:}
						| MODEQ 											{:RESULT = new Node("%=","primary", "MODEQ");:}
						;

string_expression ::= expression string_operators expression ;

string_operators ::= PLUS 
					| PLUSEQ ;

bit_expression ::= TIO expression 
					| expression bit_operators expression ;
					
bit_operators ::= RSHIFTEQ | LSHIFT | RSHIFT | URSHIFT ;

casting_expression ::= LPAREN type RPAREN expression ;

creating_expression ::= NEW creating_expression_aux ;

creating_expression_aux ::= class_name LPAREN arglist_opcional RPAREN
							| type_specifier creating_expression_opcional bracks 
							| LPAREN expression RPAREN ;

creating_expression_opcional ::= 
									| LBRACK expression RBRACK ;
									
literal_expression ::= INTEGER_LITERAL:i													{:RESULT = new Expression(new Type("int"), i.toString()); System.out.println("Line 335");:}
						| FLOAT_LITERAL:flt												{:RESULT = new Expression(new Type("float"), flt.toString()); System.out.println("Line 336");:}
						| STRING_LITERAL:str												{:RESULT = new Expression(new Type("string"), str.toString()); System.out.println("Line 337");:}
						| CHARACTER_LITERAL:chr											{:RESULT = new Expression(new Type("char"), chr.toString()); System.out.println("Line 338");:}
						;
						
arglist ::=  expression
			| COMMA expression arglist ;
			
type_specifier ::= BOOLEAN 												{:RESULT = new Type("boolean");:}
					| BYTE 												{:RESULT = new Type("byte");:}
					| CHAR 												{:RESULT = new Type("char");:}
					| SHORT 											{:RESULT = new Type("short");:}
					| INT 												{:RESULT = new Type("int");:}
					| FLOAT 											{:RESULT = new Type("float");:}
					| LONG 												{:RESULT = new Type("long");:}
					| DOUBLE 											{:RESULT = new Type("double");:}
					| class_name:cn 									{:Type t = new Type((String) cn); RESULT = t;:}
					| interface_name:in 								{:Type t = new Type((String) in); RESULT = t;:}
;

package_name ::= IDENTIFIER 
					| package_name DOT IDENTIFIER ;
						
modifier_aux ::= 
					| modifier modifier_aux;
					
modifier ::= PUBLIC 
			| PRIVATE 
			| PROTECTED 
			| STATIC 
			| FINAL
			| NATIVE 
			| SYNCHRONIZED 
			| ABSTRACT 
			| THREADSAFE 
			| TRANSIENT ;
						
						
						
						